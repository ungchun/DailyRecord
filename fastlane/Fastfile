platform :ios do
  desc "build app and upload to testflight"
  lane :beta do
    match(type: "appstore")
    increment_build_number(
        build_number: latest_testflight_build_number + 1
    )
    build_app(
      configuration: "Debug",
      export_method: "app-store",
      clean: true
    )
    ENV["FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT"] = "120"
    upload_to_testflight
    slack(
      message: "🎉 Testflight 배포에 성공했습니다!",
      slack_url: "https://hooks.slack.com/services/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"
    )
  end

  desc "build app and release to App Store."
  lane :release do |options|
    if options[:v]
      match(type: "appstore")
      increment_build_number(
        build_number: latest_testflight_build_number + 1
      )
      build_app(
        configuration: "Release",
        export_method: "app-store",
        clean: true
      )
      ENV["FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT"] = "120"
      upload_to_app_store(
        app_version: options[:v],
        skip_screenshots: true,
        skip_metadata: false,
        submit_for_review: true,
        force: true,
        automatic_release: false
	# precheck_include_in_app_purchases: false
      )
      slack(
        message: "🎉 AppStore 배포에 성공했습니다!",
        slack_url: "https://hooks.slack.com/services/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"
      )
    end
  end

  error do |lane, exception, options|
    slack(
      message: "🚨 에러 발생 : #{exception}",
      success: false,
      slack_url: "https://hooks.slack.com/services/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"
    )
  end
end
